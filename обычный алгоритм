#include <iostream>
#include <vector>
#include <tuple>
#include <cmath>
#include <chrono>
using namespace std;
using namespace std::chrono;

void printv(const vector<vector<double>>& a) {
    int n = a.size();
    for (auto i = 0; i < n; ++i) {
        for (auto j = 0; j < n; ++j) {
            cout << a[i][j] << " ";
        }
        cout << endl;
    }
}

tuple< vector<vector<double>>, vector<vector<double>>> L_and_R_Matrix(const vector<vector<double>>& A) {
    int n = A.size();
    vector<vector<double>> R(A.size());
    vector<vector<double>> L(A.size());
    for (int i = 0; i < n; ++i) {
        R[i].resize(n);
        L[i].resize(n);
    }
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (i == j) {
                L[i][j] = 1;
            }
            else if (i < j) {
                L[i][j] = 0;
            }
            else if (i > j) {
                R[i][j] = 0;
            }
        }
    }
    for (int i = 0; i < n; ++i) {
        R[0][i] = A[0][i];
    }
    for (int i = 1; i < n; ++i) {
        L[i][0] = A[i][0] / R[0][0];
    }
    for (int i = 1; i < n; ++i) {
        for (int k = 1; k < n; ++k) {
            if (k >= i) {
                double sum = 0;
                for (int j = 0; j <= i - 1; ++j) {
                    sum += L[i][j] * R[j][k];
                }
                R[i][k] = A[i][k] - sum;
            }
            if (k < i) {
                int sum = 0;
                for (int j = 0; j <= k - 1; ++j) {
                    sum += L[i][j] * R[j][k];
                }
                L[i][k] = (A[i][k] - sum) / R[k][k];
            }
        }
    }
    return (make_tuple(L, R));
}

vector<vector<double>> Pr(const vector<vector<double>>& R, const vector<vector<double>>& L) {
    int n = L.size();
    vector<vector<double>> A(n);
    for (int i = 0; i < n; ++i) {
        A[i].resize(n);
        for (int j = 0; j < n; ++j) {
            for (int t = 0; t < n; ++t) {
                A[i][j] += R[i][t] * L[t][j];
            }
        }
    }
    return A;
}

double sr(const vector<vector<double>>& L) {
    int n = L.size();
    double sum = 0;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (i > j) {
                sum += pow(L[i][j], 2);
            }
        }
    }
    return sqrt(sum);
}



vector<vector<double>> make1(int n) {
    vector<vector<double>> E(n);
    for (int i = 0; i < n; ++i) {
        E[i].resize(n);
        for (int j = 0; j < n; ++j) {
            if (i == j) {
                E[i][j] = 1;
            }
            else {
                E[i][j] = 0;
            }
        }
    }
    return E;
}

void prints(const vector<vector<double>>& R) {
    int n = R.size();
    for (int i = 0; i < n; ++i) {
        cout << R[i][i] << " ";
    }
    cout << "- собственные числа данной матрицы";
    cout << endl;
}



int main() {
    setlocale(LC_ALL, "Russian");
    int n;
    cout << "введите размер матрицы:";
    cin >> n;
    vector<vector<double>> E = make1(n);
    vector<vector<double>> A(n);
    vector<vector<double>> L;
    vector<vector<double>> R;
    cout << "введите строки матрицы" << endl;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            double c;
            cin >> c;
            A[i].push_back(c);
        }
    }
    tie(L, R) = L_and_R_Matrix(A);
    A = Pr(R, L);
    while (sr(L) > pow(10, -7)) {
        tie(L, R) = L_and_R_Matrix(A);
        A = Pr(R, L);
    }
    cout << endl;
    prints(R);
    return 0;
}
